import os
from pathlib import Path
from datetime import datetime
import fitz  # PyMuPDF

# === Directories ===
UPLOAD_DIR = Path("data/uploads")
SUMMARY_DIR = Path("data/summaries")

# Ensure directories exist
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)
SUMMARY_DIR.mkdir(parents=True, exist_ok=True)


# ============================================================
# 📁 UPLOAD HANDLING
# ============================================================
def save_upload(file) -> str:
    """Save uploaded PDF to data/uploads directory."""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_filename = f"{timestamp}_{file.filename.replace(' ', '_')}"
        file_path = UPLOAD_DIR / safe_filename

        with open(file_path, "wb") as f:
            f.write(file.file.read())

        return str(file_path)
    except Exception as e:
        raise RuntimeError(f"Failed to save upload: {e}")


# ============================================================
# 🧾 FALLBACK SUMMARY (Plain text summary)
# ============================================================
def save_summary(filename: str, text: str) -> str:
    """Save simple text summary into a readable multi-page PDF (fallback)."""
    try:
        base_name = Path(filename).stem
        summary_filename = f"{base_name}_summary.pdf"
        file_path = SUMMARY_DIR / summary_filename

        doc = fitz.open()
        page = doc.new_page()

        font_name = "courier"
        font_size = 11
        margin_x, margin_y = 50, 60
        max_width = page.rect.width - 2 * margin_x
        y = margin_y

        def add_wrapped_text(text_block, spacing=5):
            """Wrap and draw text with pagination support."""
            nonlocal y, page
            words = text_block.split()
            current_line = ""
            for word in words:
                test_line = f"{current_line} {word}".strip()
                if fitz.get_text_length(test_line, fontname=font_name, fontsize=font_size) < max_width:
                    current_line = test_line
                else:
                    if y + font_size > page.rect.height - margin_y:
                        page = doc.new_page()
                        y = margin_y
                    page.insert_text((margin_x, y), current_line, fontsize=font_size, fontname=font_name, color=(0, 0, 0))
                    y += font_size + 3
                    current_line = word
            if current_line:
                if y + font_size > page.rect.height - margin_y:
                    page = doc.new_page()
                    y = margin_y
                page.insert_text((margin_x, y), current_line, fontsize=font_size, fontname=font_name, color=(0, 0, 0))
                y += font_size + spacing

        # Header
        page.insert_text((margin_x, y), "📘 SMRZ 10-K Summarized Report", fontsize=16, fontname=font_name, color=(0.1, 0.2, 0.6))
        y += 25
        page.insert_text((margin_x, y), f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", fontsize=10, fontname=font_name, color=(0.2, 0.2, 0.2))
        y += 20

        # Body paragraphs
        for paragraph in text.split("\n\n"):
            add_wrapped_text(paragraph.strip())

        # Footer
        if y + 30 > page.rect.height - margin_y:
            page = doc.new_page()
            y = margin_y
        y += 20
        page.insert_text((margin_x, y), "Generated by SMRZ 10K Summarizer © 2025", fontsize=9, fontname=font_name, color=(0.4, 0.4, 0.4))

        doc.save(file_path)
        doc.close()
        return str(file_path)

    except Exception as e:
        raise RuntimeError(f"Failed to save summary: {e}")


# ============================================================
# 🧩 STRUCTURED SUMMARY (AnnualReport-style Layout)
# ============================================================
def save_structured_summary(filename: str, report: dict, model_used: str, chunk_count: int = 1) -> str:
    """
    Save structured summary (dict) into a professional, multi-section PDF.
    Includes pagination, chunk count, and clear section headings.
    """
    try:
        base_name = Path(filename).stem
        summary_filename = f"{base_name}_structured_summary.pdf"
        file_path = SUMMARY_DIR / summary_filename

        doc = fitz.open()
        page = doc.new_page()
        margin_x, margin_y = 50, 60
        y = margin_y
        width = page.rect.width
        font_name = "courier"

        def add_line(text, size=11, color=(0, 0, 0), spacing=5, indent=0):
            """Draw wrapped lines with pagination and indentation."""
            nonlocal y, page
            if not text:
                return
            max_width = width - 2 * margin_x - indent
            words = text.split()
            current_line = ""
            for word in words:
                test_line = f"{current_line} {word}".strip()
                tw = fitz.get_text_length(test_line, fontname=font_name, fontsize=size)
                if tw < max_width:
                    current_line = test_line
                else:
                    if y + size > page.rect.height - margin_y:
                        page = doc.new_page()
                        y = margin_y
                    page.insert_text((margin_x + indent, y), current_line, fontsize=size, fontname=font_name, color=color)
                    y += size + 2
                    current_line = word
            if current_line:
                if y + size > page.rect.height - margin_y:
                    page = doc.new_page()
                    y = margin_y
                page.insert_text((margin_x + indent, y), current_line, fontsize=size, fontname=font_name, color=color)
                y += size + spacing

        # === HEADER ===
        add_line("📘 SMRZ 10-K Structured Summary", 16, color=(0.1, 0.2, 0.6), spacing=10)
        add_line(f"Model Used: {model_used}", 10)
        add_line(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 10)
        if chunk_count > 1:
            add_line(f"Chunks Processed: {chunk_count}", 10, color=(0.3, 0.3, 0.3))
        y += 10

        # === COMPANY INFO ===
        add_line("🏢 Company Overview", 13, color=(0.05, 0.05, 0.05), spacing=8)
        add_line(f"Name: {report.get('company_name', 'Unknown Company')}", 11)
        add_line(f"CIK: {report.get('cik', 'N/A')}", 11)
        add_line(f"Fiscal Year End: {report.get('fiscal_year_end', 'N/A')}", 11)
        add_line(f"Filing Date: {report.get('filing_date', 'N/A')}", 11)
        y += 6

        # === FINANCIAL OVERVIEW ===
        add_line("💰 Financial Overview", 13, color=(0, 0.3, 0))
        for key, label in [
            ("total_revenue", "Total Revenue"),
            ("net_income", "Net Income"),
            ("total_assets", "Total Assets"),
            ("total_liabilities", "Total Liabilities"),
            ("operating_cash_flow", "Operating Cash Flow"),
            ("cash_and_equivalents", "Cash & Cash Equivalents"),
            ("num_employees", "Number of Employees"),
            ("auditor", "Auditor"),
        ]:
            val = report.get(key)
            if val:
                add_line(f"- {label}: {val}", 11, indent=20)
        y += 8

        # === BUSINESS DESCRIPTION ===
        if report.get("business_description"):
            add_line("🏭 Business Description", 13, color=(0.4, 0.1, 0))
            add_line(report["business_description"], 11, indent=10)
            y += 8

        # === RISK FACTORS ===
        if report.get("risk_factors"):
            add_line("⚠️ Risk Factors", 13, color=(0.5, 0.05, 0.05))
            for rf in report["risk_factors"]:
                add_line(f"• {rf}", 11, indent=20)
            y += 8

        # === MANAGEMENT DISCUSSION ===
        if report.get("management_discussion"):
            add_line("🧭 Management Discussion & Analysis", 13, color=(0.2, 0, 0.5))
            add_line(report["management_discussion"], 11, indent=10)
            y += 8

        # === FOOTER ===
        y += 12
        add_line("Generated by SMRZ 10K Summarizer © 2025", 9, color=(0.4, 0.4, 0.4))

        doc.save(file_path)
        doc.close()
        return str(file_path)

    except Exception as e:
        raise RuntimeError(f"Failed to save structured summary: {e}")


# ============================================================
# 📦 FILE RETRIEVAL
# ============================================================
def get_summary_file(filename: str) -> str:
    """Retrieve saved summary file path for download."""
    file_path = SUMMARY_DIR / filename
    if not file_path.exists():
        raise FileNotFoundError(f"Summary file not found: {filename}")
    return str(file_path)
